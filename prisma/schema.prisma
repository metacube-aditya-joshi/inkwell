generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  username     String        @db.VarChar(50)
  email        String       @unique @db.VarChar(255)
  password     String       @db.VarChar(255)
  is_active    Boolean      @default(true)
  created_at   DateTime     @default(now()) @db.Timestamptz
  updated_at   DateTime     @updatedAt @db.Timestamptz
  role         Role         @default(USER)
  posts        Post[]
  post_reviews PostReview[]
  api_keys     ApiKey[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(100)
  description String?  @db.Text
  parent_id   Int?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamptz
  updated_at  DateTime @updatedAt @db.Timestamptz

  parent   Category?  @relation("CategoryHierarchy", fields: [parent_id], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryHierarchy")

  posts Post[]
}

model Post {
  id                 Int        @id @default(autoincrement())
  title              String     @db.VarChar(255)
  slug               String     @unique @db.VarChar(255)
  content            String     @db.Text
  excerpt            String?    @db.Text
  author_id          Int
  category_id        Int?       
  status             PostStatus @default(DRAFT)
  featured_image_url String?    @db.VarChar(500)
  meta_description   String?    @db.VarChar(160)
  tags               Json? // JSONB in PostgreSQL
  published_at       DateTime?  @db.Timestamptz
  created_at         DateTime   @default(now()) @db.Timestamptz
  updated_at         DateTime   @updatedAt @db.Timestamptz

  author   User         @relation(fields: [author_id], references: [id], onDelete: Cascade)
  category Category?    @relation(fields: [category_id], references: [id], onDelete: SetNull)
  reviews  PostReview[]
  @@unique([title, category_id])
}

model PostReview {
  id              Int        @id @default(autoincrement())
  post_id         Int
  reviewer_id     Int
  previous_status PostStatus
  new_status      PostStatus
  review_notes    String?    @db.Text
  reviewed_at     DateTime   @default(now()) @db.Timestamptz
  is_final        Boolean    @default(false)

  // Relations
  post     Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  reviewer User @relation(fields: [reviewer_id], references: [id], onDelete: Cascade)
}

// API Keys Table
model ApiKey {
  id           Int       @id @default(autoincrement())
  user_id      Int?
  name         String    @db.VarChar(100)
  key_hash     String    @db.VarChar(255)
  permissions  Json? // JSONB for flexible permissions
  rate_limit   Int       @default(1000)
  last_used_at DateTime? @db.Timestamptz
  expires_at   DateTime? @db.Timestamptz
  is_active    Boolean   @default(true)
  created_at   DateTime  @default(now()) @db.Timestamptz

  // Relations
  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// Enums
enum Role {
  USER
  ADMIN
}

enum PostStatus {
  DRAFT
  PENDING
  APPROVED
  PUBLISHED
  REJECTED
}
